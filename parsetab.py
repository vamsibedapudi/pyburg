
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ID INT PPERCENT START TERMINALspec : decls PPERCENT rulesspec : declsdecls : emptydecls : decls decldecl : TERMINAL blist '\\n'decl : START lhs '\\n'decl : '\\n'decl : error '\\n'blist : emptyblist : blist ID '=' INTrules : emptyrules : rules lhs ':' tree '=' INT cost ';' '\\n'rules : rules '\\n'rules : rules error '\\n'lhs : IDtree : IDtree : ID '(' tree ')'tree : ID '(' tree ',' tree ')'cost : emptycost : '(' INT ')'empty :"
    
_lr_action_items = {'PPERCENT':([0,2,3,5,7,16,20,22,],[-21,4,-3,-4,-7,-8,-5,-6,]),'TERMINAL':([0,2,3,5,7,16,20,22,],[-21,6,-3,-4,-7,-8,-5,-6,]),'START':([0,2,3,5,7,16,20,22,],[-21,8,-3,-4,-7,-8,-5,-6,]),'\n':([0,2,3,4,5,6,7,9,10,11,12,13,14,15,16,18,19,20,22,24,28,38,41,],[-21,7,-3,-21,-4,-21,-7,16,18,-11,20,-9,22,-15,-8,-13,24,-5,-6,-14,-10,41,-12,]),'error':([0,2,3,4,5,7,10,11,16,18,20,22,24,41,],[-21,9,-3,-21,-4,-7,19,-11,-8,-13,-5,-6,-14,-12,]),'$end':([0,1,2,3,4,5,7,10,11,16,18,20,22,24,41,],[-21,0,-2,-3,-21,-4,-7,-1,-11,-8,-13,-5,-6,-14,-12,]),'ID':([4,6,8,10,11,12,13,18,23,24,28,30,37,41,],[-21,-21,15,15,-11,21,-9,-13,27,-14,-10,27,27,-12,]),':':([15,17,],[-15,23,]),'=':([21,26,27,36,43,],[25,29,-16,-17,-18,]),'INT':([25,29,35,],[28,31,39,]),')':([27,32,36,39,40,43,],[-16,36,-17,42,43,-18,]),',':([27,32,36,43,],[-16,37,-17,-18,]),'(':([27,31,],[30,35,]),';':([31,33,34,42,],[-21,38,-19,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'spec':([0,],[1,]),'decls':([0,],[2,]),'empty':([0,4,6,31,],[3,11,13,34,]),'decl':([2,],[5,]),'rules':([4,],[10,]),'blist':([6,],[12,]),'lhs':([8,10,],[14,17,]),'tree':([23,30,37,],[26,32,40,]),'cost':([31,],[33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> spec","S'",1,None,None,None),
  ('spec -> decls PPERCENT rules','spec',3,'p_spec1','gram.py',43),
  ('spec -> decls','spec',1,'p_spec2','gram.py',48),
  ('decls -> empty','decls',1,'p_decls1','gram.py',52),
  ('decls -> decls decl','decls',2,'p_decls2','gram.py',55),
  ('decl -> TERMINAL blist \n','decl',3,'p_decl1','gram.py',58),
  ('decl -> START lhs \n','decl',3,'p_decl2','gram.py',62),
  ('decl -> \n','decl',1,'p_decl3','gram.py',67),
  ('decl -> error \n','decl',2,'p_decl4','gram.py',70),
  ('blist -> empty','blist',1,'p_blist1','gram.py',75),
  ('blist -> blist ID = INT','blist',4,'p_blist2','gram.py',78),
  ('rules -> empty','rules',1,'p_rules1','gram.py',84),
  ('rules -> rules lhs : tree = INT cost ; \n','rules',9,'p_rules2','gram.py',87),
  ('rules -> rules \n','rules',2,'p_rules3','gram.py',91),
  ('rules -> rules error \n','rules',3,'p_rules4','gram.py',94),
  ('lhs -> ID','lhs',1,'p_lhs','gram.py',98),
  ('tree -> ID','tree',1,'p_tree1','gram.py',103),
  ('tree -> ID ( tree )','tree',4,'p_tree2','gram.py',107),
  ('tree -> ID ( tree , tree )','tree',6,'p_tree3','gram.py',111),
  ('cost -> empty','cost',1,'p_cost1','gram.py',115),
  ('cost -> ( INT )','cost',3,'p_cost2','gram.py',119),
  ('empty -> <empty>','empty',0,'p_empty','gram.py',127),
]
